import solc from 'solc';
import { promisify } from 'util';
import { readFileContent, isDirectory, relativePathToWorkingDir } from '../utils';
import { buildInputObject } from './buildUitls';
const loadRemoteVersion = promisify(solc.loadRemoteVersion);
export async function loadCompiler(config) {
    if (config.solcVersion) {
        if (isDirectory(config.solcVersion)) {
            return require(relativePathToWorkingDir(config.solcVersion));
        }
        return loadRemoteVersion(config.solcVersion);
    }
    return solc;
}
export function compileSolcjs(config) {
    return async function compile(sources, findImports) {
        const solc = await loadCompiler(config);
        const input = buildInputObject(sources, config.compilerOptions);
        const output = solc.compile(JSON.stringify(input), findImports);
        return JSON.parse(output);
    };
}
export function findInputs(files) {
    return Object.assign({}, ...files.map((file) => ({
        [file]: readFileContent(file)
    })));
}
