import fs from 'fs';
import path from 'path';
export const readFileContent = (path) => fs.readFileSync(path).toString();
export const isPositiveIntegerString = (value) => typeof value === 'string' && /^\d+$/.test(value);
export const eventParseResultToArray = (eventResult) => Object.keys(eventResult)
    .filter(isPositiveIntegerString)
    .map((key) => eventResult[key]);
export const isWarningMessage = (error) => error.severity === 'warning';
export async function getBalanceChange(transactionCallback, wallet) {
    const balanceBefore = await wallet.getBalance();
    await transactionCallback();
    const balanceAfter = await wallet.getBalance();
    return balanceAfter.sub(balanceBefore);
}
export async function getBalanceChanges(transactionCallback, wallets) {
    const balancesBefore = await Promise.all(wallets.map((wallet) => wallet.getBalance()));
    await transactionCallback();
    const balancesAfter = await Promise.all(wallets.map((wallet) => wallet.getBalance()));
    return balancesAfter.map((balance, ind) => balance.sub(balancesBefore[ind]));
}
export const isFile = (filePath) => fs.existsSync(filePath) && fs.lstatSync(filePath).isFile();
export const flattenObjectArray = (array) => array.reduce((accum, object) => Object.assign(accum, object), {});
export const last = (array) => array[array.length - 1];
export const deepCopy = (obj) => JSON.parse(JSON.stringify(obj));
export const isDirectory = (directoryPath) => fs.existsSync(relativePathToWorkingDir(directoryPath)) &&
    fs.statSync(relativePathToWorkingDir(directoryPath)).isDirectory();
export const relativePathToWorkingDir = (pathName) => path.resolve(pathName);
